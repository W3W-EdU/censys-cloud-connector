default:
  tags:
    - search

variables:
  PIP_REQUIREMENTS_FILE: "requirements.txt"

.ssh:
  script:
    - mkdir ~/.ssh/
    - ssh-keyscan gitlab.com > ~/.ssh/known_hosts
    - eval $(ssh-agent)
    # - ssh-add

.poetry:
  image: python:3.9

  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  cache:
    key:
      files:
        - poetry.lock
    paths:
      - .cache/pip

  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install -E azure -E gcp -E aws --no-ansi --no-interaction -vv
    - source `poetry env info --path`/bin/activate

make requirements txt:
  extends: .poetry
  rules:
    - if: $CI_MERGE_REQUEST_ID
  script:
    - pip install poetry
    - poetry export -o "$PIP_REQUIREMENTS_FILE" -E azure -E gcp -E aws
  artifacts:
    paths:
      - "$PIP_REQUIREMENTS_FILE"

.build-image-buildah:
  image: gcr.io/censys-internal/censys.io/buildah:2022-01-08_21-43-42
  rules:
    - if: $CI_MERGE_REQUEST_ID
  variables:
    KUBERNETES_CPU_REQUEST: 4
  before_script:
    - dnf install -y openssh-clients
    - !reference [.ssh, script]
    - mkdir -p ~/.docker && cp "${DOCKER_AUTH_CONFIG}" ~/.docker/config.json
    - export STORAGE_DRIVER="overlay"
    - buildah info || export STORAGE_DRIVER="vfs"

container image app:
  extends: .build-image-buildah
  variables:
    IMAGE_NAME: gcr.io/censys-internal/censys.io/censys-cloud-connector
  script:
    - buildah bud --squash --target=app --ssh default -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - buildah push ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - grype ${IMAGE_NAME}:${CI_COMMIT_SHA}

lint:
  extends: .poetry
  rules:
    - if: $CI_MERGE_REQUEST_ID
  script:
    - flake8 src/
    - mypy -p censys.cloud_connectors

.test-template:
  extends: .poetry

unit tests:
  extends: .test-template
  image: python:3.9
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
  script: pytest --junitxml pytest.xml --cov --cov-report xml
  artifacts:
    when: always
    paths:
      - pytest.xml
      - coverage.xml
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

scan helm chart - CVE:
  image: gcr.io/censys-internal/censys.io/helm3-ci:2022-06-16_19-14-37
  rules:
    - if: $CI_MERGE_REQUEST_ID
  needs: []
  script:
    - cd kubernetes
    - helm template censys-cloud-connectors ./censys-cloud-connectors --dry-run |  kubescape scan framework nsa -

scan helm chart - Deprecation:
  image: gcr.io/censys-internal/censys.io/helm3-ci:2022-06-16_19-14-37
  rules:
    - if: $CI_MERGE_REQUEST_ID
  needs: []
  script:
    - cd kubernetes
    - helm template censys-cloud-connectors ./censys-cloud-connectors --dry-run | kubent --helm2=false --helm3=false --cluster=false -f -

release production:
  image: gcr.io/censys-internal/censys.io/default-ci-slim:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      allow_failure: true
  needs:
    - job: container image app
      optional: true
    - job: unit tests
      optional: false
  variables:
    GIT_DEPTH: "0"
  script:
    - git config --global user.email ${GITLAB_USER_EMAIL}
    - git config --global user.name ${GITLAB_USER_NAME}
    - git remote set-url origin git@gitlab.com:censys/integrations/cloud-connectors-unified.git
    - mkdir ~/.ssh/
    - ssh-keyscan -t ed25519 gitlab.com > ~/.ssh/known_hosts
    - echo "${GITLAB_SSH_KEY}" > ~/.ssh/id_ed25519 && chmod 0600 ~/.ssh/id_ed25519
    - TAG=v$(cat pyproject.toml | grep "^version = \"*\"" | cut -d'"' -f2)
    - git tag --annotate ${TAG} --message="Deployed at $(date -u)" ${CI_COMMIT_SHA}
    - git push origin ${TAG}

deploy production image:
  extends: .build-image-buildah
  rules:
    - if: "$CI_COMMIT_TAG =~ /v.*/"
  variables:
    IMAGE_NAME: gcr.io/censys-io/censys-cloud-connector
  script:
    - buildah bud --squash --target=app --ssh default -t ${IMAGE_NAME}:${CI_COMMIT_SHA} -t ${IMAGE_NAME}:${CI_COMMIT_TAG} -t ${IMAGE_NAME}:latest .
    - buildah push ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - buildah push ${IMAGE_NAME}:${CI_COMMIT_TAG}
    - buildah push ${IMAGE_NAME}:latest

deploy python package:
  extends: .poetry
  rules:
    - if: "$CI_COMMIT_TAG =~ /v.*/"
  script:
    - poetry build -n
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - poetry publish

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

sast:
  variables:
    SEARCH_MAX_DEPTH: "10"

secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"

license_scanning:
  dependencies: ["make requirements txt"]

gemnasium-python-dependency_scanning:
  dependencies: ["make requirements txt"]
  before_script:
    - rm poetry.lock pyproject.toml
  # Triggers artifacts download, until https://gitlab.com/gitlab-org/gitlab/-/issues/249569 is implemented
