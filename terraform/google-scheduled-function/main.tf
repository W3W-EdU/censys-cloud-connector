# Poetry build
data "external" "poetry_build" {
  program     = ["python", "scripts/build.py"]
  working_dir = "${path.module}/../../"
}

resource "null_resource" "copy_build" {
  provisioner "local-exec" {
    command = "cp ${data.external.poetry_build.result.build_path} ${path.module}/${var.function_source_dir}"
  }
  triggers = {
    python_build = filesha256(data.external.poetry_build.result.build_path)
  }
  depends_on = [data.external.poetry_build]
}

resource "local_file" "requirements_txt" {
  filename   = "${path.module}/${var.function_source_dir}/requirements.txt"
  content    = <<-EOT
    # This file is automatically generated by Poetry.
    ${data.external.poetry_build.result.build_name}
    ${file(data.external.poetry_build.result.requirements)}
  EOT
  depends_on = [null_resource.copy_build]
}

# GCP Project
data "google_project" "project" {
  project_id = var.project_id
}

resource "google_project_service" "gcp_services" {
  for_each = toset(var.gcp_service_list)

  project            = var.project_id
  service            = each.key
  disable_on_destroy = false
}

resource "random_id" "suffix" {
  byte_length = 4
}

# Google Secret Manager
resource "google_secret_manager_secret" "censys_api_key" {
  secret_id = "censys_api_key"
  project   = var.project_id
  replication {
    automatic = true
  }
}

resource "google_secret_manager_secret_iam_member" "api_key_member" {
  secret_id  = google_secret_manager_secret.censys_api_key.id
  project    = var.project_id
  role       = "roles/secretmanager.secretAccessor"
  member     = "serviceAccount:${var.project_id}@appspot.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.censys_api_key]
}

resource "google_secret_manager_secret_version" "censys_api_key" {
  secret      = google_secret_manager_secret.censys_api_key.name
  secret_data = var.censys_api_key
}

data "google_secret_manager_secret_version" "censys_api_key" {
  secret = google_secret_manager_secret_version.censys_api_key.secret
  depends_on = [
    google_secret_manager_secret_version.censys_api_key
  ]
}

resource "google_secret_manager_secret" "providers" {
  secret_id = "providers"
  project   = var.project_id
  replication {
    automatic = true
  }
}

resource "google_secret_manager_secret_iam_member" "providers_member" {
  secret_id  = google_secret_manager_secret.providers.id
  project    = var.project_id
  role       = "roles/secretmanager.secretAccessor"
  member     = "serviceAccount:${var.project_id}@appspot.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.providers]
}

resource "google_secret_manager_secret_version" "providers_config" {
  secret      = google_secret_manager_secret.providers.name
  secret_data = file(var.providers_config)
}

resource "google_secret_manager_secret_version" "providers" {
  for_each = fileset("${path.module}/${var.secrets_dir}", "*.json")

  secret      = google_secret_manager_secret.providers.name
  secret_data = file("${path.module}/${var.secrets_dir}/${each.value}")
}

locals {
  providers_versions = merge({
    for k, v in google_secret_manager_secret_version.providers : "secrets/${k}" => v
  }, { "providers.yml" = google_secret_manager_secret_version.providers_config })
}

locals {
  providers_versions_map = {
    for k, v in local.providers_versions : k => element(split("/", v.name), length(split("/", v.name)) - 1)
  }
}

# Google Pub/Sub
module "pubsub_topic" {
  source       = "terraform-google-modules/pubsub/google"
  version      = "~> 1.0"
  topic        = var.topic_name
  project_id   = var.project_id
  create_topic = var.scheduler_job == null ? true : false
}

# Google Cloud Scheduler
resource "google_cloud_scheduler_job" "job" {
  count = var.scheduler_job == null ? 1 : 0

  name        = var.job_name
  description = var.job_description
  project     = var.project_id
  region      = var.region
  schedule    = var.job_schedule
  time_zone   = var.time_zone

  pubsub_target {
    topic_name = "projects/${var.project_id}/topics/${module.pubsub_topic.topic}"
    data       = var.message_data
  }
}


# Archive
data "archive_file" "main" {
  type        = "zip"
  output_path = pathexpand("${var.function_source_dir}.zip")
  source_dir  = pathexpand(var.function_source_dir)
  excludes    = var.files_to_exclude_in_source_dir

  depends_on = [
    local_file.requirements_txt,
    null_resource.copy_build
  ]
}

# Google Storage Bucket
resource "google_storage_bucket" "main" {
  count                       = var.create_bucket ? 1 : 0
  name                        = var.bucket_name == "" ? "censys-cloud-connector-bucket-${random_id.suffix.hex}" : var.bucket_name
  force_destroy               = var.bucket_force_destroy
  project                     = var.project_id
  location                    = var.region
  storage_class               = "REGIONAL"
  labels                      = var.bucket_labels
  uniform_bucket_level_access = true
}

resource "google_storage_bucket_object" "main" {
  name                = "${data.archive_file.main.output_md5}-${basename(data.archive_file.main.output_path)}"
  bucket              = var.create_bucket ? google_storage_bucket.main[0].name : var.bucket_name
  source              = data.archive_file.main.output_path
  content_disposition = "attachment"
  content_encoding    = "gzip"
  content_type        = "application/zip"

  depends_on = [
    google_storage_bucket.main,
    data.archive_file.main
  ]
}

# Google Cloud Function
resource "google_cloudfunctions_function" "main" {
  name                = var.function_name == "" ? "censys-cloud-connector-function-${random_id.suffix.hex}" : var.function_name
  description         = var.function_description
  labels              = var.function_labels
  project             = var.project_id
  region              = var.region
  available_memory_mb = var.function_available_memory_mb
  timeout             = var.function_timeout_s
  runtime             = "python39"
  entry_point         = "scan"

  source_archive_bucket = var.create_bucket ? google_storage_bucket.main[0].name : var.bucket_name
  source_archive_object = google_storage_bucket_object.main.name

  vpc_connector                 = var.vpc_connector
  vpc_connector_egress_settings = var.vpc_connector_egress_settings

  event_trigger {
    event_type = "google.pubsub.topic.publish"
    resource   = var.scheduler_job == null ? module.pubsub_topic.topic : var.topic_name
  }

  environment_variables = {
    LOGGING_LEVEL         = var.logging_level
    PROVIDERS_CONFIG_FILE = "/etc/providers/providers.yml"
    SECRETS_DIR           = "/etc/providers/secrets"
  }

  secret_environment_variables {
    key        = "CENSYS_API_KEY"
    secret     = google_secret_manager_secret.censys_api_key.secret_id
    version    = data.google_secret_manager_secret_version.censys_api_key.version
    project_id = var.project_id
  }

  secret_volumes {
    mount_path = "/etc/providers"
    secret     = google_secret_manager_secret.providers.secret_id
    project_id = var.project_id

    dynamic "versions" {
      for_each = local.providers_versions_map

      content {
        path    = versions.key
        version = versions.value
      }
    }
  }

  timeouts {
    create = "15m"
    update = "15m"
    delete = "10m"
  }
}
